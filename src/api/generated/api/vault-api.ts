/* tslint:disable */
/* eslint-disable */
/**
 * BACKYARD FINANCE API
 * BACKYARD FINANCE SERVER API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { VaultHistoryInfoResponse } from '../types';
// @ts-ignore
import type { VaultInfoResponse } from '../types';
// @ts-ignore
import type { VaultInfoStrategyResponse } from '../types';
/**
 * VaultApi - axios parameter creator
 * @export
 */
export const VaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultControllerGetAllVaults: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vaults/vaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} vaultId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultControllerGetVault: async (userId: string, vaultId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('vaultControllerGetVault', 'userId', userId)
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultControllerGetVault', 'vaultId', vaultId)
            const localVarPath = `/vaults/{userId}/{vaultId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} vaultId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultControllerGetVaultHistory: async (userId: string, vaultId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('vaultControllerGetVaultHistory', 'userId', userId)
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultControllerGetVaultHistory', 'vaultId', vaultId)
            const localVarPath = `/vaults/history/{userId}/{vaultId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VaultApi - functional programming interface
 * @export
 */
export const VaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultControllerGetAllVaults(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VaultInfoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultControllerGetAllVaults(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultApi.vaultControllerGetAllVaults']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} vaultId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultControllerGetVault(userId: string, vaultId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultInfoStrategyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultControllerGetVault(userId, vaultId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultApi.vaultControllerGetVault']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} vaultId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultControllerGetVaultHistory(userId: string, vaultId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VaultHistoryInfoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultControllerGetVaultHistory(userId, vaultId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultApi.vaultControllerGetVaultHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VaultApi - factory interface
 * @export
 */
export const VaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultControllerGetAllVaults(options?: RawAxiosRequestConfig): AxiosPromise<Array<VaultInfoResponse>> {
            return localVarFp.vaultControllerGetAllVaults(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VaultApiVaultControllerGetVaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultControllerGetVault(requestParameters: VaultApiVaultControllerGetVaultRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultInfoStrategyResponse> {
            return localVarFp.vaultControllerGetVault(requestParameters.userId, requestParameters.vaultId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VaultApiVaultControllerGetVaultHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultControllerGetVaultHistory(requestParameters: VaultApiVaultControllerGetVaultHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<VaultHistoryInfoResponse>> {
            return localVarFp.vaultControllerGetVaultHistory(requestParameters.userId, requestParameters.vaultId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for vaultControllerGetVault operation in VaultApi.
 * @export
 * @interface VaultApiVaultControllerGetVaultRequest
 */
export interface VaultApiVaultControllerGetVaultRequest {
    /**
     * 
     * @type {string}
     * @memberof VaultApiVaultControllerGetVault
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof VaultApiVaultControllerGetVault
     */
    readonly vaultId: string
}

/**
 * Request parameters for vaultControllerGetVaultHistory operation in VaultApi.
 * @export
 * @interface VaultApiVaultControllerGetVaultHistoryRequest
 */
export interface VaultApiVaultControllerGetVaultHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof VaultApiVaultControllerGetVaultHistory
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof VaultApiVaultControllerGetVaultHistory
     */
    readonly vaultId: string
}

/**
 * VaultApi - object-oriented interface
 * @export
 * @class VaultApi
 * @extends {BaseAPI}
 */
export class VaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultApi
     */
    public vaultControllerGetAllVaults(options?: RawAxiosRequestConfig) {
        return VaultApiFp(this.configuration).vaultControllerGetAllVaults(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VaultApiVaultControllerGetVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultApi
     */
    public vaultControllerGetVault(requestParameters: VaultApiVaultControllerGetVaultRequest, options?: RawAxiosRequestConfig) {
        return VaultApiFp(this.configuration).vaultControllerGetVault(requestParameters.userId, requestParameters.vaultId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VaultApiVaultControllerGetVaultHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultApi
     */
    public vaultControllerGetVaultHistory(requestParameters: VaultApiVaultControllerGetVaultHistoryRequest, options?: RawAxiosRequestConfig) {
        return VaultApiFp(this.configuration).vaultControllerGetVaultHistory(requestParameters.userId, requestParameters.vaultId, options).then((request) => request(this.axios, this.basePath));
    }
}

