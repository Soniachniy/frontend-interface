/* tslint:disable */
/* eslint-disable */
/**
 * BACKYARD FINANCE API
 * BACKYARD FINANCE SERVER API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { VerifySiwsDto } from '../types';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerNonce: async (address: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('userControllerNonce', 'address', address)
            const localVarPath = `/user/siwe/nonce`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifySiwsDto} verifySiwsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerVerifySiws: async (verifySiwsDto: VerifySiwsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifySiwsDto' is not null or undefined
            assertParamExists('userControllerVerifySiws', 'verifySiwsDto', verifySiwsDto)
            const localVarPath = `/user/siws/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifySiwsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerNonce(address: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerNonce(address, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerNonce']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {VerifySiwsDto} verifySiwsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerVerifySiws(verifySiwsDto: VerifySiwsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerVerifySiws(verifySiwsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerVerifySiws']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {UserApiUserControllerNonceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerNonce(requestParameters: UserApiUserControllerNonceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerNonce(requestParameters.address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiUserControllerVerifySiwsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerVerifySiws(requestParameters: UserApiUserControllerVerifySiwsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerVerifySiws(requestParameters.verifySiwsDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userControllerNonce operation in UserApi.
 * @export
 * @interface UserApiUserControllerNonceRequest
 */
export interface UserApiUserControllerNonceRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiUserControllerNonce
     */
    readonly address: string
}

/**
 * Request parameters for userControllerVerifySiws operation in UserApi.
 * @export
 * @interface UserApiUserControllerVerifySiwsRequest
 */
export interface UserApiUserControllerVerifySiwsRequest {
    /**
     * 
     * @type {VerifySiwsDto}
     * @memberof UserApiUserControllerVerifySiws
     */
    readonly verifySiwsDto: VerifySiwsDto
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserApiUserControllerNonceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerNonce(requestParameters: UserApiUserControllerNonceRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerNonce(requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiUserControllerVerifySiwsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerVerifySiws(requestParameters: UserApiUserControllerVerifySiwsRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerVerifySiws(requestParameters.verifySiwsDto, options).then((request) => request(this.axios, this.basePath));
    }
}

