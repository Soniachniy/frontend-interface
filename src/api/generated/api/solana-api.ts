/* tslint:disable */
/* eslint-disable */
/**
 * BACKYARD FINANCE API
 * BACKYARD FINANCE SERVER API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateStrategyDto } from '../types';
// @ts-ignore
import type { QuoteDepositDto } from '../types';
/**
 * SolanaApi - axios parameter creator
 * @export
 */
export const SolanaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStrategyDto} createStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solanaControllerCreateStrategy: async (createStrategyDto: CreateStrategyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStrategyDto' is not null or undefined
            assertParamExists('solanaControllerCreateStrategy', 'createStrategyDto', createStrategyDto)
            const localVarPath = `/solana/strategy/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStrategyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solanaControllerGetAllVaults: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/solana/vaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solanaControllerGetStrategies: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('solanaControllerGetStrategies', 'userId', userId)
            const localVarPath = `/solana/strategies/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solanaControllerGetUserTokens: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('solanaControllerGetUserTokens', 'userId', userId)
            const localVarPath = `/solana/user-tokens/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuoteDepositDto} quoteDepositDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solanaControllerQuoteDeposit: async (quoteDepositDto: QuoteDepositDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteDepositDto' is not null or undefined
            assertParamExists('solanaControllerQuoteDeposit', 'quoteDepositDto', quoteDepositDto)
            const localVarPath = `/solana/quote/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteDepositDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolanaApi - functional programming interface
 * @export
 */
export const SolanaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolanaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateStrategyDto} createStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async solanaControllerCreateStrategy(createStrategyDto: CreateStrategyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.solanaControllerCreateStrategy(createStrategyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolanaApi.solanaControllerCreateStrategy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async solanaControllerGetAllVaults(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.solanaControllerGetAllVaults(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolanaApi.solanaControllerGetAllVaults']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async solanaControllerGetStrategies(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.solanaControllerGetStrategies(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolanaApi.solanaControllerGetStrategies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async solanaControllerGetUserTokens(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.solanaControllerGetUserTokens(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolanaApi.solanaControllerGetUserTokens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuoteDepositDto} quoteDepositDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async solanaControllerQuoteDeposit(quoteDepositDto: QuoteDepositDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.solanaControllerQuoteDeposit(quoteDepositDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolanaApi.solanaControllerQuoteDeposit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolanaApi - factory interface
 * @export
 */
export const SolanaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolanaApiFp(configuration)
    return {
        /**
         * 
         * @param {SolanaApiSolanaControllerCreateStrategyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solanaControllerCreateStrategy(requestParameters: SolanaApiSolanaControllerCreateStrategyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.solanaControllerCreateStrategy(requestParameters.createStrategyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solanaControllerGetAllVaults(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.solanaControllerGetAllVaults(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SolanaApiSolanaControllerGetStrategiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solanaControllerGetStrategies(requestParameters: SolanaApiSolanaControllerGetStrategiesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.solanaControllerGetStrategies(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SolanaApiSolanaControllerGetUserTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solanaControllerGetUserTokens(requestParameters: SolanaApiSolanaControllerGetUserTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.solanaControllerGetUserTokens(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SolanaApiSolanaControllerQuoteDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solanaControllerQuoteDeposit(requestParameters: SolanaApiSolanaControllerQuoteDepositRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.solanaControllerQuoteDeposit(requestParameters.quoteDepositDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for solanaControllerCreateStrategy operation in SolanaApi.
 * @export
 * @interface SolanaApiSolanaControllerCreateStrategyRequest
 */
export interface SolanaApiSolanaControllerCreateStrategyRequest {
    /**
     * 
     * @type {CreateStrategyDto}
     * @memberof SolanaApiSolanaControllerCreateStrategy
     */
    readonly createStrategyDto: CreateStrategyDto
}

/**
 * Request parameters for solanaControllerGetStrategies operation in SolanaApi.
 * @export
 * @interface SolanaApiSolanaControllerGetStrategiesRequest
 */
export interface SolanaApiSolanaControllerGetStrategiesRequest {
    /**
     * 
     * @type {string}
     * @memberof SolanaApiSolanaControllerGetStrategies
     */
    readonly userId: string
}

/**
 * Request parameters for solanaControllerGetUserTokens operation in SolanaApi.
 * @export
 * @interface SolanaApiSolanaControllerGetUserTokensRequest
 */
export interface SolanaApiSolanaControllerGetUserTokensRequest {
    /**
     * 
     * @type {string}
     * @memberof SolanaApiSolanaControllerGetUserTokens
     */
    readonly userId: string
}

/**
 * Request parameters for solanaControllerQuoteDeposit operation in SolanaApi.
 * @export
 * @interface SolanaApiSolanaControllerQuoteDepositRequest
 */
export interface SolanaApiSolanaControllerQuoteDepositRequest {
    /**
     * 
     * @type {QuoteDepositDto}
     * @memberof SolanaApiSolanaControllerQuoteDeposit
     */
    readonly quoteDepositDto: QuoteDepositDto
}

/**
 * SolanaApi - object-oriented interface
 * @export
 * @class SolanaApi
 * @extends {BaseAPI}
 */
export class SolanaApi extends BaseAPI {
    /**
     * 
     * @param {SolanaApiSolanaControllerCreateStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolanaApi
     */
    public solanaControllerCreateStrategy(requestParameters: SolanaApiSolanaControllerCreateStrategyRequest, options?: RawAxiosRequestConfig) {
        return SolanaApiFp(this.configuration).solanaControllerCreateStrategy(requestParameters.createStrategyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolanaApi
     */
    public solanaControllerGetAllVaults(options?: RawAxiosRequestConfig) {
        return SolanaApiFp(this.configuration).solanaControllerGetAllVaults(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SolanaApiSolanaControllerGetStrategiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolanaApi
     */
    public solanaControllerGetStrategies(requestParameters: SolanaApiSolanaControllerGetStrategiesRequest, options?: RawAxiosRequestConfig) {
        return SolanaApiFp(this.configuration).solanaControllerGetStrategies(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SolanaApiSolanaControllerGetUserTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolanaApi
     */
    public solanaControllerGetUserTokens(requestParameters: SolanaApiSolanaControllerGetUserTokensRequest, options?: RawAxiosRequestConfig) {
        return SolanaApiFp(this.configuration).solanaControllerGetUserTokens(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SolanaApiSolanaControllerQuoteDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolanaApi
     */
    public solanaControllerQuoteDeposit(requestParameters: SolanaApiSolanaControllerQuoteDepositRequest, options?: RawAxiosRequestConfig) {
        return SolanaApiFp(this.configuration).solanaControllerQuoteDeposit(requestParameters.quoteDepositDto, options).then((request) => request(this.axios, this.basePath));
    }
}

