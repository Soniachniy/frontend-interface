/* tslint:disable */
/* eslint-disable */
/**
 * BACKYARD FINANCE API
 * BACKYARD FINANCE SERVER API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateStrategyDto } from '../types';
/**
 * StrategyApi - axios parameter creator
 * @export
 */
export const StrategyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStrategyDto} createStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategyControllerCreate: async (createStrategyDto: CreateStrategyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStrategyDto' is not null or undefined
            assertParamExists('strategyControllerCreate', 'createStrategyDto', createStrategyDto)
            const localVarPath = `/strategies/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStrategyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} strategyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategyControllerDeleteStrategy: async (strategyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'strategyId' is not null or undefined
            assertParamExists('strategyControllerDeleteStrategy', 'strategyId', strategyId)
            const localVarPath = `/strategies/{strategyId}`
                .replace(`{${"strategyId"}}`, encodeURIComponent(String(strategyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategyControllerGetStrategies: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('strategyControllerGetStrategies', 'userId', userId)
            const localVarPath = `/strategies/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} strategyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategyControllerGetStrategy: async (strategyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'strategyId' is not null or undefined
            assertParamExists('strategyControllerGetStrategy', 'strategyId', strategyId)
            const localVarPath = `/strategies/{strategyId}`
                .replace(`{${"strategyId"}}`, encodeURIComponent(String(strategyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StrategyApi - functional programming interface
 * @export
 */
export const StrategyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StrategyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateStrategyDto} createStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategyControllerCreate(createStrategyDto: CreateStrategyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategyControllerCreate(createStrategyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategyApi.strategyControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} strategyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategyControllerDeleteStrategy(strategyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategyControllerDeleteStrategy(strategyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategyApi.strategyControllerDeleteStrategy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategyControllerGetStrategies(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategyControllerGetStrategies(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategyApi.strategyControllerGetStrategies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} strategyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategyControllerGetStrategy(strategyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategyControllerGetStrategy(strategyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategyApi.strategyControllerGetStrategy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StrategyApi - factory interface
 * @export
 */
export const StrategyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StrategyApiFp(configuration)
    return {
        /**
         * 
         * @param {StrategyApiStrategyControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategyControllerCreate(requestParameters: StrategyApiStrategyControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.strategyControllerCreate(requestParameters.createStrategyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StrategyApiStrategyControllerDeleteStrategyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategyControllerDeleteStrategy(requestParameters: StrategyApiStrategyControllerDeleteStrategyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.strategyControllerDeleteStrategy(requestParameters.strategyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StrategyApiStrategyControllerGetStrategiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategyControllerGetStrategies(requestParameters: StrategyApiStrategyControllerGetStrategiesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.strategyControllerGetStrategies(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StrategyApiStrategyControllerGetStrategyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategyControllerGetStrategy(requestParameters: StrategyApiStrategyControllerGetStrategyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.strategyControllerGetStrategy(requestParameters.strategyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for strategyControllerCreate operation in StrategyApi.
 * @export
 * @interface StrategyApiStrategyControllerCreateRequest
 */
export interface StrategyApiStrategyControllerCreateRequest {
    /**
     * 
     * @type {CreateStrategyDto}
     * @memberof StrategyApiStrategyControllerCreate
     */
    readonly createStrategyDto: CreateStrategyDto
}

/**
 * Request parameters for strategyControllerDeleteStrategy operation in StrategyApi.
 * @export
 * @interface StrategyApiStrategyControllerDeleteStrategyRequest
 */
export interface StrategyApiStrategyControllerDeleteStrategyRequest {
    /**
     * 
     * @type {string}
     * @memberof StrategyApiStrategyControllerDeleteStrategy
     */
    readonly strategyId: string
}

/**
 * Request parameters for strategyControllerGetStrategies operation in StrategyApi.
 * @export
 * @interface StrategyApiStrategyControllerGetStrategiesRequest
 */
export interface StrategyApiStrategyControllerGetStrategiesRequest {
    /**
     * 
     * @type {string}
     * @memberof StrategyApiStrategyControllerGetStrategies
     */
    readonly userId: string
}

/**
 * Request parameters for strategyControllerGetStrategy operation in StrategyApi.
 * @export
 * @interface StrategyApiStrategyControllerGetStrategyRequest
 */
export interface StrategyApiStrategyControllerGetStrategyRequest {
    /**
     * 
     * @type {string}
     * @memberof StrategyApiStrategyControllerGetStrategy
     */
    readonly strategyId: string
}

/**
 * StrategyApi - object-oriented interface
 * @export
 * @class StrategyApi
 * @extends {BaseAPI}
 */
export class StrategyApi extends BaseAPI {
    /**
     * 
     * @param {StrategyApiStrategyControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    public strategyControllerCreate(requestParameters: StrategyApiStrategyControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return StrategyApiFp(this.configuration).strategyControllerCreate(requestParameters.createStrategyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategyApiStrategyControllerDeleteStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    public strategyControllerDeleteStrategy(requestParameters: StrategyApiStrategyControllerDeleteStrategyRequest, options?: RawAxiosRequestConfig) {
        return StrategyApiFp(this.configuration).strategyControllerDeleteStrategy(requestParameters.strategyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategyApiStrategyControllerGetStrategiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    public strategyControllerGetStrategies(requestParameters: StrategyApiStrategyControllerGetStrategiesRequest, options?: RawAxiosRequestConfig) {
        return StrategyApiFp(this.configuration).strategyControllerGetStrategies(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategyApiStrategyControllerGetStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    public strategyControllerGetStrategy(requestParameters: StrategyApiStrategyControllerGetStrategyRequest, options?: RawAxiosRequestConfig) {
        return StrategyApiFp(this.configuration).strategyControllerGetStrategy(requestParameters.strategyId, options).then((request) => request(this.axios, this.basePath));
    }
}

